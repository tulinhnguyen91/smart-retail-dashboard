# -*- coding: utf-8 -*-
"""models/prophet_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1usjlansplqfBCVi4ZK_btpbt36K9v7dT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from utils.metrics import mean_absolute_percentage_error # Import custom MAPE

def run_prophet_forecast(df_final, product_name):
    """
    Thực hiện pipeline dự báo Prophet cho một sản phẩm cụ thể.

    Args:
        df_final (pd.DataFrame): DataFrame chứa toàn bộ dữ liệu đã được xử lý.
        product_name (str): Tên sản phẩm cần dự báo.

    Returns:
        tuple: (matplotlib.figure.Figure, pd.DataFrame)
               Figure của biểu đồ dự báo, và DataFrame chứa kết quả dự báo.
               Trả về (None, None) nếu không đủ dữ liệu.
    """
    print(f"\n--- Running Prophet for product: '{product_name}' ---")

    df = df_final[df_final['Product_Name'] == product_name].copy()

    if df.empty:
        print(f"  Warning: Data for '{product_name}' is empty. Skipping Prophet.")
        return None, None

    # --- 2.1. Data Preparation for Prophet ---
    df['Date'] = pd.to_datetime(df['Date'])
    df_daily = df.groupby('Date')['Quantity_Sold'].sum().reset_index()
    df_daily = df_daily.rename(columns={'Date': 'ds', 'Quantity_Sold': 'y'}).copy()

    if len(df_daily) < 2:
        print(f"  Warning: Not enough daily data points ({len(df_daily)}) for '{product_name}' to train Prophet. Skipping.")
        return None, None

    # --- 2.2. Prophet Model Building ---
    try:
        model = Prophet(daily_seasonality=True, weekly_seasonality=True, yearly_seasonality=True)
        model.fit(df_daily)
        future = model.make_future_dataframe(periods=365) # Forecast for next 365 days
        forecast = model.predict(future)
    except Exception as e:
        print(f"  Error building/fitting Prophet model for '{product_name}': {e}")
        return None, None

    # --- 2.3. Model Evaluation ---
    merged = df_daily.merge(forecast[['ds', 'yhat']], on='ds', how='left')
    merged.dropna(inplace=True)

    if len(merged) == 0:
        print(f"  Warning: No overlapping historical data for evaluation for '{product_name}'. Skipping evaluation.")
        # Still proceed with visualization if forecast exists
        mae, rmse, mape, r2 = np.nan, np.nan, np.nan, np.nan
    else:
        y_true = merged['y']
        y_pred = merged['yhat']

        mae = mean_absolute_error(y_true, y_pred)
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))
        mape = mean_absolute_percentage_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        print(f"  Model Evaluation for '{product_name}' (Historical Range):")
        print(f"    MAE: {mae:.2f}")
        print(f"    RMSE: {rmse:.2f}")
        print(f"    MAPE: {mape:.2f}%")
        print(f"    R²: {r2:.2f}")

    # --- Visualization ---
    fig, ax = plt.subplots(figsize=(14, 6))
    ax.plot(forecast['ds'], forecast['yhat'], label='Prophet Forecast', color='blue')
    ax.plot(df_daily['ds'], df_daily['y'], label='Actual Sales (Historical)', color='orange')
    ax.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'], color='blue', alpha=0.2, label='Forecast Uncertainty')

    ax.set_title(f"Prophet Forecast vs Actuals for '{product_name}' (Daily)")
    ax.set_xlabel("Date")
    ax.set_ylabel("Quantity Sold")
    ax.legend()
    ax.grid(True)
    plt.tight_layout()

    return fig, forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(columns={'ds': 'Date', 'yhat': 'Forecasted_Quantity_Sold'})