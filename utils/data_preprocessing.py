# -*- coding: utf-8 -*-
"""utils/data_preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZbOuemRHNdHVH54ZU-AE1ohSnGfZOD0M
"""

import pandas as pd
import numpy as np

def load_and_preprocess_data(
    transaction_path='data/transaction_data_2023_2024_updated.csv',
    promotion_path='data/promotion_data.csv',
    store_path='data/store_info_data_2023_2024_updated.csv'
):
    """
    Tải, làm sạch và hợp nhất các DataFrame giao dịch, khuyến mãi và thông tin cửa hàng.

    Args:
        transaction_path (str): Đường dẫn đến file CSV dữ liệu giao dịch.
        promotion_path (str): Đường dẫn đến file CSV dữ liệu khuyến mãi.
        store_path (str): Đường dẫn đến file CSV dữ liệu thông tin cửa hàng.

    Returns:
        pd.DataFrame: DataFrame cuối cùng đã được làm sạch và hợp nhất.
    """
    # Read data from CSV files
    try:
        df_transaction = pd.read_csv(transaction_path)
        df_promotion = pd.read_csv(promotion_path)
        df_store = pd.read_csv(store_path)
    except FileNotFoundError as e:
        print(f"Lỗi: Không tìm thấy file dữ liệu. Vui lòng đảm bảo các file CSV nằm trong thư mục 'data/'. Lỗi: {e}")
        return pd.DataFrame() # Trả về DataFrame rỗng nếu không tìm thấy file

    # Làm sạch dữ liệu cơ bản
    df_transaction.drop_duplicates(inplace=True)
    df_promotion.drop_duplicates(inplace=True)
    df_store.drop_duplicates(inplace=True)

    # Convert date columns to datetime format
    df_transaction['Date'] = pd.to_datetime(df_transaction['Date'])
    df_promotion['Start_Date'] = pd.to_datetime(df_promotion['Start_Date'])
    df_promotion['End_Date'] = pd.to_datetime(df_promotion['End_Date'])

    # Extract temporal features from the Date column
    df_transaction['Year'] = df_transaction['Date'].dt.year
    df_transaction['Month'] = df_transaction['Date'].dt.month
    df_transaction['Quarter'] = df_transaction['Date'].dt.quarter

    # Xử lý dữ liệu khuyến mãi + join data promotion
    df_promotion['Promo_Type'] = df_promotion['Promo_Type'].str.lower().str.strip()
    promo_type_mapping = {
        'no promotion': 0,
        'discount': 1,
        'trade-in': 2,
    }
    df_promotion['Promo_Type_Code'] = df_promotion['Promo_Type'].map(promo_type_mapping)

    # Initialize default promotion columns in transaction data
    df_transaction['Promo_ID'] = None
    df_transaction['Promo_Type_Code'] = 0
    df_transaction['Promo_Budget'] = 0

    # Assign promotion information based on date range
    for _, promo_row in df_promotion.iterrows():
        mask = (df_transaction['Date'] >= promo_row['Start_Date']) & \
               (df_transaction['Date'] <= promo_row['End_Date'])
        df_transaction.loc[mask, 'Promo_ID'] = promo_row['Promo_ID']
        df_transaction.loc[mask, 'Promo_Type_Code'] = promo_row['Promo_Type_Code']
        df_transaction.loc[mask, 'Promo_Budget'] = promo_row['Budget']

    # Join data store_info để hoàn thiện dataset
    df_store_clean = df_store[['Store_ID', 'Store_Size']].drop_duplicates()
    df_final = df_transaction.merge(df_store_clean, on='Store_ID', how='left')

    # Handle missing values for Promo_ID and Store_Size
    df_final['Promo_ID'] = df_final['Promo_ID'].fillna('No Promo')
    df_final['Store_Size'] = df_final['Store_Size'].fillna(df_final['Store_Size'].median())

    # Kiểm tra và làm sạch data sau khi join
    cols_to_clean = ['Quantity_Sold', 'Price', 'Stock_Level', 'Reorder_Threshold', 'Revenue']
    for col in cols_to_clean:
        df_final[col] = df_final[col].apply(lambda x: x if x >= 0 else np.nan)

    df_final.dropna(subset=['Quantity_Sold', 'Price', 'Stock_Level'], inplace=True)
    df_final.reset_index(drop=True, inplace=True)

    # Recompute Revenue as Quantity_Sold * Price for consistency, as it might be affected by cleaning
    df_final['Revenue'] = df_final['Quantity_Sold'] * df_final['Price']

    return df_final
