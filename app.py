# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eVk8fXsLXzXr51IbSTT6N2B7g5s_H8lr
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
import io # ƒê·∫£m b·∫£o d√≤ng n√†y c√≥ ·ªü ƒë·∫ßu file

# Import functions from your modules
from utils.data_preprocessing import load_and_preprocess_data
from eda.visualizations import (
    plot_store_performance_ranking, plot_monthly_revenue, plot_total_units_sold_by_month,
    plot_quantity_sold_by_brand_per_store, plot_apple_vs_samsung_sales_by_year,
    plot_monthly_units_sold_by_performance_tier, plot_quantity_sold_by_location_tier,
    plot_performance_tier_distribution_by_location_tier,
    plot_promotion_activity_throughout_year, plot_promotion_type_frequency_by_brand,
    plot_monthly_promo_budget_vs_units_sold, plot_correlation_heatmap,
    plot_sales_distribution, get_top_n_products, get_descriptive_stats,
    get_top_n_products_by_revenue, plot_time_series_decomposition
)
from models.linear_regression import run_linear_regression_forecast
from models.prophet_model import run_prophet_forecast
from models.lstm_model import run_lstm_forecast
from models.lightgbm_model import run_lightgbm_forecast
from optimization.inventory_optimization import run_inventory_optimization
from optimization.supply_chain_optimization import run_supply_chain_optimization
from concept_drift.drift_detector import run_concept_drift_check

# --- C·∫•u h√¨nh trang Streamlit ---
st.set_page_config(
    layout="wide",
    page_title="H·ªá th·ªëng Ph√¢n t√≠ch & D·ª± b√°o B√°n h√†ng",
    page_icon="üìä"
)

# --- Ti√™u ƒë·ªÅ ch√≠nh c·ªßa ·ª©ng d·ª•ng ---
st.title("üìä H·ªá th·ªëng Ph√¢n t√≠ch & D·ª± b√°o B√°n h√†ng Th√¥ng minh")
st.markdown("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Dashboard ph√¢n t√≠ch b√°n h√†ng to√†n di·ªán.
S·ª≠ d·ª•ng thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i ƒë·ªÉ kh√°m ph√° c√°c ch·ª©c nƒÉng ch√≠nh:
""")

# --- Load Data (s·ª≠ d·ª•ng Streamlit's caching) ---
@st.cache_data
def load_and_cache_data():
    """
    T·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu.
    S·ª≠ d·ª•ng st.cache_data ƒë·ªÉ tr√°nh t·∫£i l·∫°i d·ªØ li·ªáu m·ªói khi ·ª©ng d·ª•ng refresh.
    """
    st.info("ƒêang t·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu. Vui l√≤ng ch·ªù m·ªôt ch√∫t...")
    df_final = load_and_preprocess_data(
        transaction_path='data/transaction_data_2023_2024_updated.csv',
        promotion_path='data/promotion_data.csv',
        store_path='data/store_info_data_2023_2024_updated.csv'
    )
    if not df_final.empty:
        # L∆∞u df_final v√†o m·ªôt file t·∫°m th·ªùi ƒë·ªÉ c√°c module kh√°c c√≥ th·ªÉ ƒë·ªçc n·∫øu c·∫ßn
        # (v√≠ d·ª•: drift_detector ƒë·ªçc t·ª´ file)
        df_final.to_csv('data/final_dataset.csv', index=False)
        st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† ti·ªÅn x·ª≠ l√Ω th√†nh c√¥ng!")
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra c√°c file CSV trong th∆∞ m·ª•c `data/`.")
    return df_final

df_final = load_and_cache_data()

# D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
if df_final.empty:
    st.stop()

# T·∫°o b·∫£n sao cho c√°c h√†m EDA c√≥ th·ªÉ s·ª≠a ƒë·ªïi DataFrame
df_transaction_for_eda = df_final.copy()
# T·∫£i df_store_info m·ªôt l·∫ßn ·ªü ƒë√¢y v√† truy·ªÅn v√†o c√°c h√†m t·ªëi ∆∞u
df_store_info_for_opt = pd.read_csv('data/store_info_data_2023_2024_updated.csv')


# --- Sidebar Navigation ---
st.sidebar.title("ƒêi·ªÅu h∆∞·ªõng")
analysis_type = st.sidebar.radio(
    "Ch·ªçn ch·ª©c nƒÉng:",
    ("T·ªïng quan D·ªØ li·ªáu", "Ph√¢n t√≠ch Kh√°m ph√° (EDA)", "D·ª± b√°o Doanh s·ªë", "T·ªëi ∆∞u h√≥a", "Concept Drift")
)

# --- Main Content Area ---

if analysis_type == "T·ªïng quan D·ªØ li·ªáu":
    st.header("üìä T·ªïng quan D·ªØ li·ªáu")
    st.markdown("Cung c·∫•p c√°i nh√¨n t·ªïng qu√°t v·ªÅ c·∫•u tr√∫c v√† n·ªôi dung c·ªßa t·∫≠p d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω.")

    # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë KPI quan tr·ªçng
    total_revenue = df_final['Revenue'].sum() / 1_000_000 # Chuy·ªÉn sang tri·ªáu VND
    total_units_sold = df_final['Quantity_Sold'].sum()
    num_unique_products = df_final['Product_Name'].nunique()
    num_unique_stores = df_final['Store_ID'].nunique()

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("T·ªïng Doanh thu", f"{total_revenue:,.2f} Tri·ªáu VND")
    with col2:
        st.metric("T·ªïng SP B√°n ra", f"{total_units_sold:,.0f} ƒê∆°n v·ªã")
    with col3:
        st.metric("S·ªë l∆∞·ª£ng S·∫£n ph·∫©m", f"{num_unique_products}")
    with col4:
        st.metric("S·ªë l∆∞·ª£ng C·ª≠a h√†ng", f"{num_unique_stores}")

    st.subheader("5 d√≤ng ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu cu·ªëi c√πng:")
    st.dataframe(df_final.head())

    st.subheader("Th√¥ng tin t·ªïng quan v·ªÅ d·ªØ li·ªáu:")
    # ƒê·ªÉ hi·ªÉn th·ªã df.info() trong Streamlit, c·∫ßn chuy·ªÉn n√≥ th√†nh string
    buffer = io.StringIO()
    df_final.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)

    st.subheader("Th·ªëng k√™ m√¥ t·∫£:")
    st.dataframe(df_final.describe())

elif analysis_type == "Ph√¢n t√≠ch Kh√°m ph√° (EDA)":
    st.header("üîç Ph√¢n t√≠ch Kh√°m ph√° D·ªØ li·ªáu (EDA)")
    st.markdown("Kh√°m ph√° c√°c insight, xu h∆∞·ªõng v√† m·ªëi quan h·ªá trong d·ªØ li·ªáu b√°n h√†ng c·ªßa b·∫°n th√¥ng qua c√°c bi·ªÉu ƒë·ªì v√† b·∫£ng th·ªëng k√™.")

    # S·ª≠ d·ª•ng Tabs ƒë·ªÉ t·ªï ch·ª©c c√°c bi·ªÉu ƒë·ªì EDA
    tab_sales_perf, tab_promo_corr, tab_stats_products = st.tabs([
        "üìà Hi·ªáu su·∫•t B√°n h√†ng",
        "üè∑Ô∏è Ph√¢n t√≠ch Khuy·∫øn m√£i & T∆∞∆°ng quan",
        "üìä Th·ªëng k√™ & S·∫£n ph·∫©m"
    ])

    with tab_sales_perf:
        st.subheader("Hi·ªáu su·∫•t B√°n h√†ng")
        st.markdown("C√°c bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y ph√¢n t√≠ch hi·ªáu su·∫•t b√°n h√†ng t·ªïng th·ªÉ, theo th·ªùi gian v√† theo c·ª≠a h√†ng/th∆∞∆°ng hi·ªáu.")

        st.markdown("---")
        st.write("#### X·∫øp h·∫°ng hi·ªáu su·∫•t c·ª≠a h√†ng theo s·ªë l∆∞·ª£ng b√°n")
        fig = plot_store_performance_ranking(df_transaction_for_eda)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì c·ªôt n√†y hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra c·ªßa t·ª´ng c·ª≠a h√†ng, gi√∫p x√°c ƒë·ªãnh c√°c c·ª≠a h√†ng ho·∫°t ƒë·ªông hi·ªáu qu·∫£ nh·∫•t.")

        st.markdown("---")
        st.write("#### Doanh thu h√†ng th√°ng")
        fig = plot_monthly_revenue(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng th·ªÉ hi·ªán xu h∆∞·ªõng doanh thu t·ªïng c·ªông theo t·ª´ng th√°ng trong giai ƒëo·∫°n 2023-2024.")

        st.markdown("---")
        st.write("#### T·ªïng s·ªë s·∫£n ph·∫©m b√°n ra theo th√°ng")
        fig = plot_total_units_sold_by_month(df_final)
        st.pyplot(fig)
        st.markdown("Xu h∆∞·ªõng t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra theo t·ª´ng th√°ng, cho th·∫•y t√≠nh m√πa v·ª• ho·∫∑c c√°c giai ƒëo·∫°n tƒÉng/gi·∫£m doanh s·ªë.")

        st.markdown("---")
        st.write("#### S·ªë l∆∞·ª£ng b√°n theo th∆∞∆°ng hi·ªáu cho m·ªói c·ª≠a h√†ng")
        fig = plot_quantity_sold_by_brand_per_store(df_transaction_for_eda)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì c·ªôt nh√≥m n√†y so s√°nh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·ªßa Apple v√† Samsung b√°n ra t·∫°i m·ªói c·ª≠a h√†ng.")

        st.markdown("---")
        st.write("#### T·ªïng s·ªë s·∫£n ph·∫©m Apple vs Samsung b√°n ra theo nƒÉm")
        fig = plot_apple_vs_samsung_sales_by_year(df_final)
        st.pyplot(fig)
        st.markdown("So s√°nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·ªßa Apple v√† Samsung b√°n ra theo t·ª´ng nƒÉm.")

        st.markdown("---")
        st.write("#### Xu h∆∞·ªõng s·ªë l∆∞·ª£ng b√°n h√†ng th√°ng theo c·∫•p hi·ªáu su·∫•t c·ª≠a h√†ng")
        fig = plot_monthly_units_sold_by_performance_tier(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng n√†y ph√¢n t√≠ch xu h∆∞·ªõng s·ªë l∆∞·ª£ng b√°n h√†ng th√°ng c·ªßa c√°c c·ª≠a h√†ng ƒë∆∞·ª£c ph√¢n lo·∫°i theo hi·ªáu su·∫•t (Cao, Trung b√¨nh, Th·∫•p).")

        st.markdown("---")
        st.write("#### T·ªïng v√† trung b√¨nh s·ªë l∆∞·ª£ng b√°n theo c·∫•p ƒë·ªô v·ªã tr√≠ c·ª≠a h√†ng")
        col_loc1, col_loc2 = st.columns(2)
        with col_loc1:
            fig1, fig2 = plot_quantity_sold_by_location_tier(df_transaction_for_eda)
            st.pyplot(fig1)
            st.markdown("T·ªïng s·ªë l∆∞·ª£ng b√°n theo c·∫•p ƒë·ªô v·ªã tr√≠ (Trung t√¢m, G·∫ßn trung t√¢m, Ngo·∫°i √¥).")
        with col_loc2:
            st.pyplot(fig2)
            st.markdown("S·ªë l∆∞·ª£ng b√°n trung b√¨nh tr√™n m·ªói giao d·ªãch theo c·∫•p ƒë·ªô v·ªã tr√≠.")

        st.markdown("---")
        st.write("#### Ph√¢n ph·ªëi c·∫•p hi·ªáu su·∫•t theo c·∫•p ƒë·ªô v·ªã tr√≠ c·ª≠a h√†ng")
        fig = plot_performance_tier_distribution_by_location_tier(df_final)
        st.pyplot(fig)
        st.markdown("Heatmap n√†y cho th·∫•y t·ª∑ l·ªá ph√¢n ph·ªëi c·ªßa c√°c c·∫•p hi·ªáu su·∫•t c·ª≠a h√†ng (Th·∫•p, Trung b√¨nh, Cao) trong t·ª´ng c·∫•p ƒë·ªô v·ªã tr√≠ ƒë·ªãa l√Ω.")


    with tab_promo_corr:
        st.subheader("Ph√¢n t√≠ch Khuy·∫øn m√£i & T∆∞∆°ng quan")
        st.markdown("Ph·∫ßn n√†y t·∫≠p trung v√†o t√°c ƒë·ªông c·ªßa c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i v√† m·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn s·ªë trong d·ªØ li·ªáu.")

        st.markdown("---")
        st.write("#### Ho·∫°t ƒë·ªông khuy·∫øn m√£i trong nƒÉm")
        fig = plot_promotion_activity_throughout_year(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì k·∫øt h·ª£p hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i v√† t·ªïng ng√¢n s√°ch khuy·∫øn m√£i theo t·ª´ng th√°ng.")

        st.markdown("---")
        st.write("#### T·∫ßn su·∫•t lo·∫°i khuy·∫øn m√£i theo th∆∞∆°ng hi·ªáu")
        fig = plot_promotion_type_frequency_by_brand(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì c·ªôt n√†y so s√°nh t·∫ßn su·∫•t c√°c lo·∫°i khuy·∫øn m√£i (Gi·∫£m gi√°, ƒê·ªïi c≈© l·∫•y m·ªõi) ƒë∆∞·ª£c √°p d·ª•ng cho t·ª´ng th∆∞∆°ng hi·ªáu (Apple, Samsung).")

        st.markdown("---")
        st.write("#### T∆∞∆°ng quan: Ng√¢n s√°ch khuy·∫øn m√£i h√†ng th√°ng vs S·ªë l∆∞·ª£ng b√°n")
        fig = plot_monthly_promo_budget_vs_units_sold(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì ph√¢n t√°n v·ªõi ƒë∆∞·ªùng h·ªìi quy n√†y minh h·ªça m·ªëi quan h·ªá gi·ªØa t·ªïng ng√¢n s√°ch khuy·∫øn m√£i h√†ng th√°ng v√† t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra h√†ng th√°ng.")

        st.markdown("---")
        st.write("#### Heatmap ma tr·∫≠n t∆∞∆°ng quan")
        fig = plot_correlation_heatmap(df_final)
        st.pyplot(fig)
        st.markdown("Heatmap hi·ªÉn th·ªã ma tr·∫≠n t∆∞∆°ng quan Pearson gi·ªØa c√°c bi·∫øn s·ªë s·ªë h·ªçc trong t·∫≠p d·ªØ li·ªáu, gi√∫p nh·∫≠n di·ªán c√°c m·ªëi quan h·ªá m·∫°nh m·∫Ω gi·ªØa ch√∫ng.")

    with tab_stats_products:
        st.subheader("Th·ªëng k√™ & S·∫£n ph·∫©m")
        st.markdown("Cung c·∫•p c√°c b·∫£ng th·ªëng k√™ chi ti·∫øt v√† ph√¢n t√≠ch s√¢u v·ªÅ s·∫£n ph·∫©m.")

        st.markdown("---")
        st.write("#### Th·ªëng k√™ m√¥ t·∫£ t·ªïng quan c·ªßa d·ªØ li·ªáu")
        stats_df = get_descriptive_stats(df_final, columns_to_describe=['Quantity_Sold', 'Price', 'Revenue', 'Stock_Level', 'Promo_Budget', 'Store_Size'])
        st.dataframe(stats_df)
        st.markdown("B·∫£ng tr√™n cung c·∫•p c√°c th·ªëng k√™ m√¥ t·∫£ c∆° b·∫£n (trung b√¨nh, ƒë·ªô l·ªách chu·∫©n, min, max, c√°c t·ª© ph√¢n v·ªã) cho c√°c c·ªôt s·ªë quan tr·ªçng trong d·ªØ li·ªáu c·ªßa b·∫°n.")

        st.markdown("---")
        st.write("#### Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng b√°n (Quantity_Sold)")
        fig = plot_sales_distribution(df_final)
        st.pyplot(fig)
        st.markdown("Bi·ªÉu ƒë·ªì n√†y cho th·∫•y ph√¢n ph·ªëi c·ªßa s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra. B·∫°n c√≥ th·ªÉ nh·∫≠n th·∫•y li·ªáu d·ªØ li·ªáu c√≥ b·ªã l·ªách (skewed) hay c√≥ nhi·ªÅu gi√° tr·ªã ngo·∫°i lai (outliers) kh√¥ng.")

        st.markdown("---")
        st.write("#### Top N s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t theo s·ªë l∆∞·ª£ng")
        top_n_qty = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m Top N:", min_value=5, max_value=20, value=10, key="top_n_qty_slider")
        top_products_qty_df = get_top_n_products(df_final, n=top_n_qty)
        st.dataframe(top_products_qty_df)
        st.markdown(f"B·∫£ng n√†y li·ªát k√™ {top_n_qty} s·∫£n ph·∫©m c√≥ t·ªïng s·ªë l∆∞·ª£ng b√°n cao nh·∫•t trong to√†n b·ªô d·ªØ li·ªáu.")

        st.markdown("---")
        st.write("#### Top N s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t theo doanh thu")
        top_n_revenue = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m Top N:", min_value=5, max_value=20, value=10, key="top_n_revenue_slider")
        top_products_revenue_df = get_top_n_products_by_revenue(df_final, n=top_n_revenue)
        st.dataframe(top_products_revenue_df)
        st.markdown(f"B·∫£ng n√†y li·ªát k√™ {top_n_revenue} s·∫£n ph·∫©m t·∫°o ra doanh thu cao nh·∫•t.")

        st.markdown("---")
        st.write("#### Ph√¢n r√£ chu·ªói th·ªùi gian theo s·∫£n ph·∫©m")
        product_names_for_decomposition = df_final['Product_Name'].unique().tolist()
        selected_product_for_decomp = st.selectbox("Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ph√¢n r√£ chu·ªói th·ªùi gian:", product_names_for_decomposition)
        if st.button(f"Ph√¢n r√£ chu·ªói th·ªùi gian cho {selected_product_for_decomp}"):
            with st.spinner(f"ƒêang ph√¢n r√£ chu·ªói th·ªùi gian cho {selected_product_for_decomp}..."):
                fig = plot_time_series_decomposition(df_final, selected_product_for_decomp)
            if fig:
                st.pyplot(fig)
                st.markdown("Bi·ªÉu ƒë·ªì n√†y ph√¢n r√£ chu·ªói th·ªùi gian th√†nh c√°c th√†nh ph·∫ßn: Quan s√°t ƒë∆∞·ª£c (Observed), Xu h∆∞·ªõng (Trend), M√πa v·ª• (Seasonal) v√† Ph·∫ßn d∆∞ (Residual), gi√∫p hi·ªÉu r√µ c√°c y·∫øu t·ªë bi·∫øn ƒë·ªông c·ªßa doanh s·ªë.")
            else:
                st.warning(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n r√£ chu·ªói th·ªùi gian cho s·∫£n ph·∫©m '{selected_product_for_decomp}'.")


elif analysis_type == "D·ª± b√°o Doanh s·ªë":
    st.header("üîÆ D·ª± b√°o Doanh s·ªë")
    st.markdown("S·ª≠ d·ª•ng c√°c m√¥ h√¨nh h·ªçc m√°y ƒë·ªÉ d·ª± ƒëo√°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra trong t∆∞∆°ng lai.")

    product_names = df_final['Product_Name'].unique().tolist()
    selected_product = st.selectbox("Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ d·ª± b√°o:", product_names)

    model_option = st.selectbox(
        "Ch·ªçn m√¥ h√¨nh d·ª± b√°o:",
        ("Linear Regression", "Prophet", "LSTM", "LightGBM")
    )

    if st.button("Ch·∫°y d·ª± b√°o"):
        st.info(f"ƒêang ch·∫°y d·ª± b√°o cho s·∫£n ph·∫©m: **{selected_product}** b·∫±ng m√¥ h√¨nh **{model_option}**...")
        fig = None
        forecast_df = pd.DataFrame()

        with st.spinner(f'ƒêang hu·∫•n luy·ªán v√† d·ª± b√°o v·ªõi {model_option} cho {selected_product}, c√≥ th·ªÉ m·∫•t v√†i ph√∫t...'):
            if model_option == "Linear Regression":
                fig, forecast_df = run_linear_regression_forecast(df_final, selected_product)
            elif model_option == "Prophet":
                fig, forecast_df = run_prophet_forecast(df_final, selected_product)
            elif model_option == "LSTM":
                fig, forecast_df = run_lstm_forecast(df_final, selected_product)
            elif model_option == "LightGBM":
                fig, forecast_df = run_lightgbm_forecast(df_final, selected_product)

        if fig:
            st.success("D·ª± b√°o ho√†n t·∫•t!")
            st.pyplot(fig)
            st.subheader("K·∫øt qu·∫£ d·ª± b√°o (2025):")
            st.dataframe(forecast_df)
            st.download_button(
                label="T·∫£i k·∫øt qu·∫£ d·ª± b√°o",
                data=forecast_df.to_csv(index=True).encode('utf-8'),
                file_name=f"{selected_product}_{model_option}_forecast.csv",
                mime="text/csv",
            )
        else:
            st.error("Kh√¥ng th·ªÉ t·∫°o d·ª± b√°o cho s·∫£n ph·∫©m n√†y. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu ho·∫∑c log l·ªói.")

elif analysis_type == "T·ªëi ∆∞u h√≥a":
    st.header("‚öôÔ∏è T·ªëi ∆∞u h√≥a")
    st.markdown("ƒê·ªÅ xu·∫•t c√°c gi·∫£i ph√°p t·ªëi ∆∞u cho vi·ªác qu·∫£n l√Ω t·ªìn kho v√† chu·ªói cung ·ª©ng.")

    optimization_option = st.selectbox(
        "Ch·ªçn lo·∫°i t·ªëi ∆∞u h√≥a:",
        ("T·ªëi ∆∞u t·ªìn kho (Kho t·ªïng -> C·ª≠a h√†ng)", "T·ªëi ∆∞u chu·ªói cung ·ª©ng (C·ª≠a h√†ng -> C·ª≠a h√†ng)")
    )

    if optimization_option == "T·ªëi ∆∞u t·ªìn kho (Kho t·ªïng -> C·ª≠a h√†ng)":
        st.subheader("T·ªëi ∆∞u t·ªìn kho t·ª´ kho t·ªïng")
        st.markdown("M√¥ h√¨nh n√†y gi√∫p ph√¢n b·ªï t·ªëi ∆∞u s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ kho t·ªïng ƒë·∫øn c√°c c·ª≠a h√†ng d·ª±a tr√™n nhu c·∫ßu v√† s·ª©c ch·ª©a.")

        col_opt_inv1, col_opt_inv2 = st.columns(2)
        with col_opt_inv1:
            warehouse_limit = st.number_input("Gi·ªõi h·∫°n cung c·∫•p t·ª´ kho t·ªïng (ƒë∆°n v·ªã):", min_value=1, value=1000, step=100)
        with col_opt_inv2:
            storage_cap = st.number_input("S·ª©c ch·ª©a s·∫£n ph·∫©m tr√™n m·ªói m¬≤ c·ª≠a h√†ng:", min_value=0.1, value=0.5, step=0.1)

        if st.button("Ch·∫°y t·ªëi ∆∞u t·ªìn kho"):
            with st.spinner("ƒêang ch·∫°y t·ªëi ∆∞u t·ªìn kho, vui l√≤ng ch·ªù..."):
                # TRUY·ªÄN df_final v√† df_store_info_for_opt ƒê√É ƒê∆Ø·ª¢C T·∫¢I ·ªû ƒê·∫¶U APP
                results_df = run_inventory_optimization(df_final, df_store_info_for_opt,
                                                        warehouse_supply_limit=warehouse_limit,
                                                        storage_capacity_per_sqm=storage_cap)
            if not results_df.empty:
                st.success("T·ªëi ∆∞u t·ªìn kho ho√†n t·∫•t!")
                st.subheader("K·∫øt qu·∫£ t·ªëi ∆∞u t·ªìn kho (ƒê∆°n v·ªã c·∫ßn ƒëi·ªÅu ch·ªânh t·ª´ kho t·ªïng):")
                st.dataframe(results_df[results_df['Adjustment_Units_From_Warehouse'] > 0].sort_values(by='Adjustment_Units_From_Warehouse', ascending=False))
                st.download_button(
                    label="T·∫£i k·∫øt qu·∫£ t·ªëi ∆∞u t·ªìn kho",
                    data=results_df.to_csv(index=False).encode('utf-8'),
                    file_name="inventory_optimization_results.csv",
                    mime="text/csv",
                )
            else:
                st.warning("Kh√¥ng c√≥ ƒë·ªÅ xu·∫•t ƒëi·ªÅu ch·ªânh t·ªìn kho n√†o ƒë∆∞·ª£c ƒë∆∞a ra. C√≥ th·ªÉ kh√¥ng c√≥ thi·∫øu h·ª•t ho·∫∑c c√°c r√†ng bu·ªôc qu√° ch·∫∑t.")

    elif optimization_option == "T·ªëi ∆∞u chu·ªói cung ·ª©ng (C·ª≠a h√†ng -> C·ª≠a h√†ng)":
        st.subheader("T·ªëi ∆∞u chu·ªói cung ·ª©ng (Chuy·ªÉn kho gi·ªØa c√°c c·ª≠a h√†ng)")
        st.markdown("M√¥ h√¨nh n√†y ƒë·ªÅ xu·∫•t c√°c ƒë·ª£t chuy·ªÉn kho gi·ªØa c√°c c·ª≠a h√†ng ƒë·ªÉ c√¢n b·∫±ng t·ªìn kho, gi·∫£m thi·ªÉu chi ph√≠ v·∫≠n chuy·ªÉn.")

        col_opt_sc1, col_opt_sc2 = st.columns(2)
        with col_opt_sc1:
            storage_cap_sc = st.number_input("S·ª©c ch·ª©a s·∫£n ph·∫©m tr√™n m·ªói m¬≤ c·ª≠a h√†ng:", min_value=0.1, value=0.5, step=0.1, key="sc_cap")
        with col_opt_sc2:
            unmet_penalty = st.number_input("Chi ph√≠ ph·∫°t cho nhu c·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë√°p ·ª©ng:", min_value=1, value=1000, step=100, key="sc_penalty")

        if st.button("Ch·∫°y t·ªëi ∆∞u chu·ªói cung ·ª©ng"):
            with st.spinner("ƒêang ch·∫°y t·ªëi ∆∞u chu·ªói cung ·ª©ng, vui l√≤ng ch·ªù..."):
                # TRUY·ªÄN df_final v√† df_store_info_for_opt ƒê√É ƒê∆Ø·ª¢C T·∫¢I ·ªû ƒê·∫¶U APP
                transfer_df, unmet_df, fig_sc = run_supply_chain_optimization(df_final, df_store_info_for_opt,
                                                                              storage_capacity_per_sqm=storage_cap_sc,
                                                                              unmet_demand_penalty=unmet_penalty)
            st.success("T·ªëi ∆∞u chu·ªói cung ·ª©ng ho√†n t·∫•t!")
            if transfer_df is not None and not transfer_df.empty:
                st.subheader("ƒê·ªÅ xu·∫•t chuy·ªÉn kho gi·ªØa c√°c c·ª≠a h√†ng:")
                st.dataframe(transfer_df)
                st.download_button(
                    label="T·∫£i k·∫øt qu·∫£ chuy·ªÉn kho",
                    data=transfer_df.to_csv(index=False).encode('utf-8'),
                    file_name="supply_chain_transfers_results.csv",
                    mime="text/csv",
                )
                if fig_sc:
                    st.pyplot(fig_sc)
            else:
                st.info("Kh√¥ng c√≥ chuy·ªÉn kho n√†o ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë·ªß.")

            if unmet_df is not None and not unmet_df.empty:
                st.subheader("Nhu c·∫ßu c√≤n thi·∫øu sau t·ªëi ∆∞u:")
                st.dataframe(unmet_df)
                st.download_button(
                    label="T·∫£i t√≥m t·∫Øt nhu c·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë√°p ·ª©ng",
                    data=unmet_df.to_csv(index=False).encode('utf-8'),
                    file_name="supply_chain_unmet_demand.csv",
                    mime="text/csv",
                )
            else:
                st.info("T·∫•t c·∫£ nhu c·∫ßu ban ƒë·∫ßu ƒë√£ ƒë∆∞·ª£c ƒë√°p ·ª©ng th√¥ng qua chuy·ªÉn kho.")

elif analysis_type == "Concept Drift":
    st.header("‚ö†Ô∏è Ki·ªÉm tra Concept Drift")
    st.markdown("Ki·ªÉm tra s·ª± thay ƒë·ªïi trong ph√¢n ph·ªëi d·ªØ li·ªáu 'Quantity_Sold' theo th·ªùi gian, m·ªôt d·∫•u hi·ªáu cho th·∫•y m√¥ h√¨nh c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c hu·∫•n luy·ªán l·∫°i.")

    drift_split_date = st.text_input("Nh·∫≠p ng√†y ph√¢n chia d·ªØ li·ªáu (YYYY-MM-DD):", value="2024-11-01")

    if st.button("Ch·∫°y ki·ªÉm tra Concept Drift"):
        with st.spinner("ƒêang ch·∫°y ki·ªÉm tra concept drift..."):
            run_concept_drift_check(df_path='data/final_dataset.csv', split_date=drift_split_date)
        st.success("Ki·ªÉm tra Concept Drift ho√†n t·∫•t!")

